[workspace]
authors = ["Fredrick Eisele <fred.eisele@vanderbilt.edu>"]
channels = ["http://localhost:19000/pixi-local/meso-forge", "https://prefix.dev/meso-forge", "conda-forge"]
name = "tinkergraphs"
platforms = ["linux-64"]
version = "0.1.0"

# List all available Gradle tasks
[tasks.gradle-tasks]
cmd = "gradle tasks"

# Run arbitrary Gradle commands (pass arguments after task name)
[tasks.gradle]
cmd = "gradle"

# Build the entire TinkerGraph project (compile all targets and run tests)
[tasks.build]
cmd = "gradle build"

# Compile Kotlin source code for JVM target
[tasks.compile]
cmd = "gradle compileKotlinJvm"

# Run all test suites
[tasks.test]
cmd = "gradle test"

# Clean build artifacts and generated files
[tasks.clean]
cmd = "gradle clean"

[dependencies]
gradle = "9.0.*"
openjdk = "23.0.*"
kotlin = "2.2.*"
ruby = ">=3.0"
python = ">=3.8"
pip = "*"

# Documentation generation tasks
[tasks.docs]
cmd = "gradle generateDocs"

# Install required gems for documentation
[tasks.docs-setup]
cmd = "gem install asciidoctor asciidoctor-diagram asciidoctor-revealjs asciidoctor-pdf"

# Generate AsciiDoc documentation with diagrams
[tasks.docs-adoc]
cmd = "asciidoctor -r asciidoctor-diagram docs/roadmap.adoc -o build/docs/roadmap.html"

# Generate PDF documentation
[tasks.docs-pdf]
cmd = "asciidoctor-pdf -r asciidoctor-diagram docs/roadmap.adoc -o build/docs/roadmap.pdf"

# Generate reveal.js presentation
[tasks.docs-slides]
cmd = "asciidoctor-revealjs docs/roadmap.adoc -o build/docs/roadmap-slides.html"

# Generate all available documentation formats
[tasks.docs-all]
cmd = "pixi run docs-adoc && pixi run docs-pdf && pixi run docs-slides"

# Check available asciidoctor tools
[tasks.docs-check]
cmd = "ruby -e \"puts 'Ruby version: ' + RUBY_VERSION; %w[asciidoctor asciidoctor-diagram asciidoctor-revealjs asciidoctor-pdf].each {|gem| begin; require gem; puts gem + ': available'; rescue LoadError; puts gem + ': not available'; end}\""

# Python platform support tasks

# Build native shared library for Python
[tasks.python-native]
cmd = "gradle linkNative"
description = "Build native shared library for Python integration"

# Install Python package in development mode
[tasks.python-setup]
cmd = "python -m pip install -e python/"
description = "Install Python package in development mode"

# Run Python tests
[tasks.python-test]
cmd = "python -m pytest python/tests/ -v"
description = "Run Python integration tests"

# Build and test Python integration
[tasks.python-build-test]
cmd = "pixi run python-native && pixi run python-setup && pixi run python-test"
description = "Complete Python integration build and test pipeline"

# Python development test (for interactive testing)
[tasks.python-dev]
cmd = "python -c \"from tinkergraphs import TinkerGraph; print('TinkerGraph Python bindings loaded successfully')\""
description = "Test Python bindings import"
