[workspace]
authors = ["Fredrick Eisele <fred.eisele@vanderbilt.edu>"]
channels = ["http://localhost:19000/pixi-local/meso-forge", "https://prefix.dev/meso-forge", "conda-forge"]
name = "tinkergraphs"
platforms = ["linux-64"]
version = "0.1.0"

# List all available Gradle tasks
[tasks.gradle-tasks]
cmd = "gradle tasks"

# Run arbitrary Gradle commands (pass arguments after task name)
[tasks.gradle]
cmd = "gradle"

# Build the entire TinkerGraph project (compile all targets and run tests)
[tasks.build]
cmd = "gradle build"

# Compile all targets without running tests
[tasks.compile-all]
cmd = "gradle compileKotlinJvm compileKotlinJs compileKotlinNative"
description = "Compile all Kotlin targets (JVM, JS, Native) without running tests"

# Compile Kotlin source code for JVM target
[tasks.compile]
cmd = "gradle compileKotlinJvm"

# Run all test suites (may fail if there are compilation issues in some tests)
[tasks.test]
cmd = "gradle allTests"

# Try to run tests with fallback to compilation check if they fail
[tasks.test-safe]
cmd = "gradle allTests || (echo 'Tests failed - checking what compiles...' && gradle compileKotlinJvm && echo 'JVM code compiles successfully' && gradle compileKotlinJs && echo 'JS code compiles successfully' && gradle compileKotlinNative && echo 'Native code compiles successfully')"

# Check what compiles without running tests
[tasks.test-compile-check]
cmd = "echo 'Checking compilation...' && gradle compileKotlinJvm && echo '✅ JVM compiles' && gradle compileKotlinJs && echo '✅ JS compiles' && gradle compileKotlinNative && echo '✅ Native compiles' && echo 'All main code compiles successfully'"

# Check if test code compiles
[tasks.test-code-check]
cmd = "echo 'Checking test compilation (may show errors)...' && (gradle compileTestKotlinJvm && echo '✅ JVM tests compile' || echo '❌ JVM test compilation failed') && (gradle compileTestKotlinJs && echo '✅ JS tests compile' || echo '❌ JS test compilation failed') && (gradle compileTestKotlinNative && echo '✅ Native tests compile' || echo '❌ Native test compilation failed')"

# Run JVM-specific tests only
[tasks.test-jvm]
cmd = "gradle jvmTest"

# Run JavaScript tests only (all JS test types)
[tasks.test-js]
cmd = "gradle jsTest"

# Run Native tests only
[tasks.test-native]
cmd = "gradle nativeTest"

# Run JavaScript tests in browser
[tasks.test-js-browser]
cmd = "gradle jsBrowserTest"

# Run JavaScript tests in Node.js
[tasks.test-js-node]
cmd = "gradle jsNodeTest"

# List all available test tasks
[tasks.test-help]
cmd = "echo 'Available test commands:' && echo '  pixi run test               - All tests (may have compilation issues)' && echo '  pixi run test-safe          - Try tests with fallback to compilation check' && echo '  pixi run test-compile-check - Check if main code compiles' && echo '  pixi run test-code-check    - Check if test code compiles' && echo '  pixi run test-jvm           - JVM tests only' && echo '  pixi run test-js            - JavaScript tests' && echo '  pixi run test-native        - Native tests' && echo '  pixi run test-js-browser    - JS tests in browser' && echo '  pixi run test-js-node       - JS tests in Node.js'"

# Clean build artifacts and generated files
[tasks.clean]
cmd = "gradle clean"

[dependencies]
gradle = "9.0.*"
openjdk = "23.0.*"
kotlin = "2.2.*"
ruby = ">=3.0"
python = ">=3.8"
pip = "*"

# Documentation generation tasks
[tasks.docs]
cmd = "gradle generateDocs"

# Install required gems for documentation
[tasks.docs-setup]
cmd = "gem install asciidoctor asciidoctor-diagram asciidoctor-revealjs asciidoctor-pdf"

# Generate AsciiDoc documentation with diagrams
[tasks.docs-adoc]
cmd = "asciidoctor -r asciidoctor-diagram docs/roadmap.adoc -o build/docs/roadmap.html"

# Generate PDF documentation
[tasks.docs-pdf]
cmd = "asciidoctor-pdf -r asciidoctor-diagram docs/roadmap.adoc -o build/docs/roadmap.pdf"

# Generate reveal.js presentation
[tasks.docs-slides]
cmd = "asciidoctor-revealjs docs/roadmap.adoc -o build/docs/roadmap-slides.html"

# Generate all available documentation formats
[tasks.docs-all]
cmd = "pixi run docs-adoc && pixi run docs-pdf && pixi run docs-slides"

# Check available asciidoctor tools
[tasks.docs-check]
cmd = "ruby -e \"puts 'Ruby version: ' + RUBY_VERSION; %w[asciidoctor asciidoctor-diagram asciidoctor-revealjs asciidoctor-pdf].each {|gem| begin; require gem; puts gem + ': available'; rescue LoadError; puts gem + ': not available'; end}\""

# Python platform support tasks

# Build native shared library for Python
[tasks.python-native]
cmd = "gradle linkNative"
description = "Build native shared library for Python integration"

# Install Python package in development mode
[tasks.python-setup]
cmd = "python -m pip install -e python/"
description = "Install Python package in development mode"

# Run Python tests
[tasks.python-test]
cmd = "python -m pytest python/tests/ -v"
description = "Run Python integration tests"

# Build and test Python integration
[tasks.python-build-test]
cmd = "pixi run python-native && pixi run python-setup && pixi run python-test"
description = "Complete Python integration build and test pipeline"

# Python development test (for interactive testing)
[tasks.python-dev]
cmd = "python -c \"from tinkergraphs import TinkerGraph; print('TinkerGraph Python bindings loaded successfully')\""
description = "Test Python bindings import"

# Platform demonstration tasks

# Run JVM platform demonstration
[tasks.runJvmDemo]
cmd = "gradle runJvmDemo"
description = "Run JVM platform demonstration showcasing Java interop and enterprise features"

# Run JavaScript platform demonstration in Node.js
[tasks.runJsNodeDemo]
cmd = "gradle runJsNodeDemo"
description = "Run JavaScript platform demonstration in Node.js environment"

# Run Native platform demonstration
[tasks.runNativeDemo]
cmd = "gradle runNativeDemo"
description = "Run Native platform demonstration showcasing native performance optimizations"
