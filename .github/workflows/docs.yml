name: Deploy Documentation to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pixi
      uses: prefix-dev/setup-pixi@v0.4.1
      with:
        pixi-version: latest
        cache: true

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Cache Dokka
      uses: actions/cache@v3
      with:
        path: build/dokka
        key: ${{ runner.os }}-dokka-${{ hashFiles('src/**/*.kt', 'build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-dokka-

    - name: Build project
      run: pixi run build

    - name: Generate API documentation
      run: pixi run docs

    - name: Create docs directory structure
      run: |
        mkdir -p docs-site
        mkdir -p docs-site/api
        mkdir -p docs-site/guides
        mkdir -p docs-site/examples
        mkdir -p docs-site/changelog

    - name: Copy API documentation
      run: |
        if [ -d "build/dokka/html" ]; then
          cp -r build/dokka/html/* docs-site/api/
        else
          echo "Warning: Dokka HTML output not found"
          mkdir -p docs-site/api
          echo "<h1>API Documentation</h1><p>Documentation generation failed</p>" > docs-site/api/index.html
        fi

    - name: Copy guides and tutorials
      run: |
        if [ -d "docs" ]; then
          find docs -name "*.adoc" -o -name "*.md" | while read file; do
            cp "$file" docs-site/guides/
          done
        fi

    - name: Copy changelog
      run: |
        if [ -d "docs/changelog" ]; then
          cp -r docs/changelog/* docs-site/changelog/
        fi

    - name: Generate main index page
      run: |
        cat > docs-site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>TinkerGraphs Documentation</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    line-height: 1.6;
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                    background: #f8f9fa;
                }
                .header {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 40px;
                    border-radius: 10px;
                    text-align: center;
                    margin-bottom: 30px;
                }
                .section {
                    background: white;
                    padding: 30px;
                    margin: 20px 0;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }
                .grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }
                .card {
                    background: white;
                    padding: 25px;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    text-decoration: none;
                    color: inherit;
                    transition: transform 0.2s;
                }
                .card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 5px 20px rgba(0,0,0,0.15);
                }
                .card h3 {
                    color: #667eea;
                    margin-top: 0;
                }
                .badge {
                    display: inline-block;
                    background: #28a745;
                    color: white;
                    padding: 4px 12px;
                    border-radius: 20px;
                    font-size: 0.8em;
                    font-weight: bold;
                }
                .feature-list {
                    list-style: none;
                    padding: 0;
                }
                .feature-list li {
                    padding: 8px 0;
                    border-bottom: 1px solid #eee;
                }
                .feature-list li:before {
                    content: "‚úÖ";
                    margin-right: 10px;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>TinkerGraphs Documentation</h1>
                <p>A high-performance, multiplatform graph database implementation for Apache TinkerPop</p>
                <div class="badge">v1.0.0</div>
            </div>

            <div class="section">
                <h2>Welcome to TinkerGraphs</h2>
                <p>TinkerGraphs is a comprehensive, multiplatform implementation of Apache TinkerPop's graph database
                specification. Built with Kotlin Multiplatform, it provides native performance optimizations,
                advanced indexing capabilities, and seamless integration across JVM, JavaScript, and Native platforms.</p>

                <ul class="feature-list">
                    <li><strong>Multiplatform Support</strong> - JVM, JavaScript/Node.js, and Native platforms</li>
                    <li><strong>High Performance</strong> - Advanced indexing, memory pooling, and SIMD optimizations</li>
                    <li><strong>TinkerPop Compliant</strong> - Full compatibility with Gremlin query language</li>
                    <li><strong>Production Ready</strong> - Comprehensive testing and enterprise-grade features</li>
                </ul>
            </div>

            <div class="grid">
                <a href="api/" class="card">
                    <h3>üìö API Reference</h3>
                    <p>Complete API documentation with detailed examples and usage patterns. Generated automatically from source code.</p>
                </a>

                <a href="guides/" class="card">
                    <h3>üìñ Guides & Tutorials</h3>
                    <p>Step-by-step tutorials, migration guides, and best practices for using TinkerGraphs effectively.</p>
                </a>

                <a href="changelog/" class="card">
                    <h3>üìù Changelog</h3>
                    <p>Detailed implementation logs, performance benchmarks, and feature development history.</p>
                </a>

                <a href="https://github.com/tinkergraphs/tinkergraphs" class="card">
                    <h3>üîß Source Code</h3>
                    <p>View the source code, contribute to development, and report issues on GitHub.</p>
                </a>
            </div>

            <div class="section">
                <h2>Quick Start</h2>
                <pre><code>// JVM/Android
dependencies {
    implementation("org.apache.tinkerpop:tinkergraphs:1.0.0")
}

// Create and use a graph
val graph = TinkerGraph.open()
val vertex = graph.addVertex("person", "name", "Alice")
val results = graph.traversal().V().hasLabel("person").toList()</code></pre>
            </div>

            <div class="section">
                <h2>Platform Coverage</h2>
                <div class="grid">
                    <div class="card">
                        <h3>‚òï JVM Platform</h3>
                        <p>Full featured implementation with enterprise optimizations, concurrent access, and JVM serialization.</p>
                    </div>
                    <div class="card">
                        <h3>üåê JavaScript/Node.js</h3>
                        <p>Browser and Node.js support with WebAssembly optimizations and seamless JSON integration.</p>
                    </div>
                    <div class="card">
                        <h3>‚ö° Native Platforms</h3>
                        <p>High-performance native binaries with memory pooling, SIMD optimizations, and zero-copy I/O.</p>
                    </div>
                </div>
            </div>

            <footer class="section" style="text-align: center; margin-top: 50px;">
                <p>&copy; 2024 TinkerGraphs Project. Licensed under Apache License 2.0.</p>
                <p>Built with ‚ù§Ô∏è using Kotlin Multiplatform and Apache TinkerPop</p>
            </footer>
        </body>
        </html>
        EOF

    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs-site

  deploy:
    needs: build-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
