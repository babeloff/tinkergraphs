package org.apache.tinkerpop.gremlin.tinkergraph.storage

import org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph
import org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex
import org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge
import org.apache.tinkerpop.gremlin.tinkergraph.serialization.JavaScriptJson
import kotlin.test.*
import kotlin.js.Promise

/**
 * Tests for JavaScript storage implementations.
 */
class JavaScriptStorageTest {

    private lateinit var graph: TinkerGraph

    @BeforeTest
    fun setup() {
        graph = TinkerGraph.open()
    }

    @AfterTest
    fun cleanup() {
        // Clean up any test data
    }

    @Test
    fun testLocalStorageAvailability() {
        val localStorage = LocalStorage()
        // Test should not throw exceptions when checking availability
        val isAvailable = localStorage.isAvailable()
        // In test environment, this may or may not be available
        assertTrue(isAvailable || !isAvailable)
    }

    @Test
    fun testStorageHelpers() {
        val vertex = graph.addVertex("person") as TinkerVertex
        vertex.property("name", "Alice")
        vertex.property("age", 30)

        val vertexData = StorageHelpers.createVertexData(vertex)

        assertEquals(vertex.id().toString(), vertexData.id)
        assertEquals("person", vertexData.label)
        assertTrue(vertexData.properties.containsKey("name"))
        assertTrue(vertexData.properties.containsKey("age"))
    }

    @Test
    fun testEdgeStorageHelpers() {
        val alice = graph.addVertex("person") as TinkerVertex
        val bob = graph.addVertex("person") as TinkerVertex
        val edge = alice.addEdge("knows", bob) as TinkerEdge
        edge.property("since", 2020)

        val edgeData = StorageHelpers.createEdgeData(edge)

        assertEquals(edge.id().toString(), edgeData.id)
        assertEquals("knows", edgeData.label)
        assertEquals(alice.id().toString(), edgeData.outVertexId)
        assertEquals(bob.id().toString(), edgeData.inVertexId)
        assertTrue(edgeData.properties.containsKey("since"))
    }

    @Test
    fun testPropertySerialization() {
        // Test different value types
        assertEquals("null", StorageHelpers.serializeValue(null))
        assertEquals("hello", StorageHelpers.serializeValue("hello"))
        assertEquals("42", StorageHelpers.serializeValue(42))
        assertEquals("3.14", StorageHelpers.serializeValue(3.14))
        assertEquals("true", StorageHelpers.serializeValue(true))
        assertEquals("false", StorageHelpers.serializeValue(false))
    }

    @Test
    fun testPropertyDeserialization() {
        // Test different value types
        assertNull(StorageHelpers.deserializeValue("null"))
        assertEquals("hello", StorageHelpers.deserializeValue("hello"))
        assertEquals(42, StorageHelpers.deserializeValue("42"))
        assertEquals(3.14, StorageHelpers.deserializeValue("3.14"))
        assertEquals(true, StorageHelpers.deserializeValue("true"))
        assertEquals(false, StorageHelpers.deserializeValue("false"))
    }

    @Test
    fun testVertexPropertyExtraction() {
        val vertex = graph.addVertex("person") as TinkerVertex
        vertex.property("name", "Alice")
        vertex.property("age", 30)

        val properties = StorageHelpers.extractVertexProperties(vertex)
        assertEquals(2, properties.size)
        assertTrue(properties.containsKey("name"))
        assertTrue(properties.containsKey("age"))
    }

    @Test
    fun testEdgePropertyExtraction() {
        val alice = graph.addVertex("person") as TinkerVertex
        val bob = graph.addVertex("person") as TinkerVertex
        val edge = alice.addEdge("knows", bob) as TinkerEdge
        edge.property("since", 2020)
        edge.property("weight", 0.8)

        val properties = StorageHelpers.extractEdgeProperties(edge)
        assertEquals(2, properties.size)
        assertTrue(properties.containsKey("since"))
        assertTrue(properties.containsKey("weight"))
    }

    @Test
    fun testVertexValidation() {
        val vertex = graph.addVertex("person") as TinkerVertex
        vertex.property("name", "Alice")

        assertTrue(StorageHelpers.validateVertexForSerialization(vertex))
    }

    @Test
    fun testEdgeValidation() {
        val alice = graph.addVertex("person") as TinkerVertex
        val bob = graph.addVertex("person") as TinkerVertex
        val edge = alice.addEdge("knows", bob) as TinkerEdge

        assertTrue(StorageHelpers.validateEdgeForSerialization(edge))
    }

    @Test
    fun testSizeEstimation() {
        val vertex = graph.addVertex("person") as TinkerVertex
        vertex.property("name", "Alice")
        vertex.property("age", 30)

        val size = StorageHelpers.estimateVertexSize(vertex)
        assertTrue(size > 0)
    }

    @Test
    fun testEdgeSizeEstimation() {
        val alice = graph.addVertex("person") as TinkerVertex
        val bob = graph.addVertex("person") as TinkerVertex
        val edge = alice.addEdge("knows", bob) as TinkerEdge
        edge.property("since", 2020)

        val size = StorageHelpers.estimateEdgeSize(edge)
        assertTrue(size > 0)
    }

    @Test
    fun testPropertyLookupMaps() {
        val vertex = graph.addVertex("person") as TinkerVertex
        vertex.property("name", "Alice")
        vertex.property("age", 30)

        val lookupMap = StorageHelpers.createPropertyLookupMap(vertex)
        assertEquals("Alice", lookupMap["name"])
        assertEquals(30, lookupMap["age"])
    }

    @Test
    fun testVertexPropertyHelpers() {
        val vertex = graph.addVertex("person") as TinkerVertex
        vertex.property("name", "Alice")

        assertTrue(StorageHelpers.hasVertexProperty(vertex, "name"))
        assertFalse(StorageHelpers.hasVertexProperty(vertex, "nonexistent"))

        assertEquals("Alice", StorageHelpers.getVertexPropertyValue(vertex, "name"))
        assertNull(StorageHelpers.getVertexPropertyValue(vertex, "nonexistent"))
    }

    @Test
    fun testEdgePropertyHelpers() {
        val alice = graph.addVertex("person") as TinkerVertex
        val bob = graph.addVertex("person") as TinkerVertex
        val edge = alice.addEdge("knows", bob) as TinkerEdge
        edge.property("since", 2020)

        assertTrue(StorageHelpers.hasEdgeProperty(edge, "since"))
        assertFalse(StorageHelpers.hasEdgeProperty(edge, "nonexistent"))

        assertEquals(2020, StorageHelpers.getEdgePropertyValue(edge, "since"))
        assertNull(StorageHelpers.getEdgePropertyValue(edge, "nonexistent"))
    }

    @Test
    fun testPropertyCounting() {
        val vertex = graph.addVertex("person") as TinkerVertex
        vertex.property("name", "Alice")
        vertex.property("age", 30)
        vertex.property("city", "New York")

        assertEquals(3, StorageHelpers.countVertexProperties(vertex))
    }

    @Test
    fun testEdgePropertyCounting() {
        val alice = graph.addVertex("person") as TinkerVertex
        val bob = graph.addVertex("person") as TinkerVertex
        val edge = alice.addEdge("knows", bob) as TinkerEdge
        edge.property("since", 2020)
        edge.property("weight", 0.8)

        assertEquals(2, StorageHelpers.countEdgeProperties(edge))
    }

    @Test
    fun testVertexPropertySerialization() {
        val vertex = graph.addVertex("person") as TinkerVertex
        val property = vertex.property("name", "Alice")

        val serialized = StorageHelpers.serializeTinkerVertexProperty(property)

        assertTrue(serialized.containsKey("id"))
        assertEquals("name", serialized["key"])
        assertEquals("Alice", serialized["value"])
    }

    @Test
    fun testPropertySerialization() {
        val vertex = graph.addVertex("person") as TinkerVertex
        val property = vertex.property("name", "Alice")

        val serialized = StorageHelpers.serializeProperty(property)

        assertEquals("name", serialized["key"])
        assertEquals("Alice", serialized["value"])
    }

    @Test
    fun testLocalStorageUsage() {
        val localStorage = LocalStorage("Test_")

        if (localStorage.isAvailable()) {
            val usage = localStorage.getStorageUsage()
            assertTrue(usage >= 0)
        }
    }

    @Test
    fun testIndexedDBSupport() {
        val isSupported = IndexedDBStorage.isSupported()
        // Should not throw exception
        assertTrue(isSupported || !isSupported)
    }

    @Test
    fun testFileSystemStorageSupport() {
        val isSupported = org.apache.tinkerpop.gremlin.tinkergraph.nodejs.FileSystemStorage.isSupported()
        // In browser environment, this should be false
        // In Node.js environment, this should be true
        assertTrue(isSupported || !isSupported)
    }

    @Test
    fun testDataClassSerialization() {
        val vertexData = VertexData(
            id = "v1",
            label = "person",
            properties = mapOf(
                "name" to PropertyData("p1", "Alice"),
                "age" to PropertyData("p2", "30")
            )
        )

        // Should be able to create the object without errors
        assertEquals("v1", vertexData.id)
        assertEquals("person", vertexData.label)
        assertEquals(2, vertexData.properties.size)
    }

    @Test
    fun testEdgeDataSerialization() {
        val edgeData = EdgeData(
            id = "e1",
            label = "knows",
            inVertexId = "v2",
            outVertexId = "v1",
            properties = mapOf(
                "since" to PropertyData("p1", "2020")
            )
        )

        assertEquals("e1", edgeData.id)
        assertEquals("knows", edgeData.label)
        assertEquals("v1", edgeData.outVertexId)
        assertEquals("v2", edgeData.inVertexId)
        assertEquals(1, edgeData.properties.size)
    }

    @Test
    fun testComplexGraphStorage() {
        // Create a complex graph
        val alice = graph.addVertex("person") as TinkerVertex
        alice.property("name", "Alice")
        alice.property("age", 30)

        val bob = graph.addVertex("person") as TinkerVertex
        bob.property("name", "Bob")
        bob.property("age", 25)

        val edge = alice.addEdge("knows", bob) as TinkerEdge
        edge.property("since", 2020)
        edge.property("weight", 0.8)

        // Test storage helpers with complex graph
        val aliceData = StorageHelpers.createVertexData(alice)
        val bobData = StorageHelpers.createVertexData(bob)
        val edgeData = StorageHelpers.createEdgeData(edge)

        // Verify all data is captured correctly
        assertEquals("Alice", StorageHelpers.deserializeValue(aliceData.properties["name"]!!.value))
        assertEquals(30, StorageHelpers.deserializeValue(aliceData.properties["age"]!!.value))
        assertEquals("Bob", StorageHelpers.deserializeValue(bobData.properties["name"]!!.value))
        assertEquals(25, StorageHelpers.deserializeValue(bobData.properties["age"]!!.value))
        assertEquals(2020, StorageHelpers.deserializeValue(edgeData.properties["since"]!!.value))
        assertEquals(0.8, StorageHelpers.deserializeValue(edgeData.properties["weight"]!!.value))
    }

    @Test
    fun testStorageValidation() {
        val vertex = graph.addVertex("person") as TinkerVertex
        vertex.property("name", "Alice")

        val alice = graph.addVertex("person") as TinkerVertex
        val bob = graph.addVertex("person") as TinkerVertex
        val edge = alice.addEdge("knows", bob) as TinkerEdge

        // Test validation methods
        assertTrue(StorageHelpers.validateVertexForSerialization(vertex))
        assertTrue(StorageHelpers.validateEdgeForSerialization(edge))

        // Test key extraction
        val vertexKeys = StorageHelpers.getVertexPropertyKeys(vertex)
        assertEquals(1, vertexKeys.size)
        assertTrue(vertexKeys.contains("name"))

        val edgeKeys = StorageHelpers.getEdgePropertyKeys(edge)
        assertEquals(0, edgeKeys.size) // No properties added to edge
    }

    @Test
    fun testMetaPropertyExtraction() {
        val vertex = graph.addVertex("person") as TinkerVertex
        val nameProperty = vertex.property("name", "Alice")
        nameProperty.property("source", "user_input")
        nameProperty.property("timestamp", System.currentTimeMillis())

        val metaProperties = StorageHelpers.extractMetaProperties(nameProperty)
        assertEquals(2, metaProperties.size)
        assertTrue(metaProperties.containsKey("source"))
        assertTrue(metaProperties.containsKey("timestamp"))
    }
}
